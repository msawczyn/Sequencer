//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Sawczyn.Sequencer
{
	/// <summary>
	/// DomainRelationship Flow
	/// Description for Sawczyn.Sequencer.Flow
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.Sequencer.Flow.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.Sequencer.Flow.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.Sequencer.SequencerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("91cec0b4-ef09-4861-8bc9-2003ada86286")]
	public partial class Flow : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Flow domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x91cec0b4, 0xef09, 0x4861, 0x8b, 0xc9, 0x20, 0x03, 0xad, 0xa8, 0x62, 0x86);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Flow link in the same Partition as the given FlowElement
		/// </summary>
		/// <param name="source">FlowElement to use as the source of the relationship.</param>
		/// <param name="target">FlowElement to use as the target of the relationship.</param>
		public Flow(FlowElement source, FlowElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Flow.FlowFromDomainRoleId, source), new DslModeling::RoleAssignment(Flow.FlowToDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Flow(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Flow(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Flow(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Flow(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FlowFrom domain role code
		
		/// <summary>
		/// FlowFrom domain role Id.
		/// </summary>
		public static readonly global::System.Guid FlowFromDomainRoleId = new global::System.Guid(0x47639d7f, 0x33f5, 0x40d2, 0xad, 0xa9, 0x8a, 0x62, 0xfb, 0x3c, 0x0a, 0x59);
		
		/// <summary>
		/// DomainRole FlowFrom
		/// Description for Sawczyn.Sequencer.Flow.FlowFrom
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.Sequencer.Flow/FlowFrom.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.Sequencer.Flow/FlowFrom.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FlowTo", PropertyDisplayNameKey="Sawczyn.Sequencer.Flow/FlowFrom.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("47639d7f-33f5-40d2-ada9-8a62fb3c0a59")]
		public virtual FlowElement FlowFrom
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, FlowFromDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FlowFromDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FlowFrom of a FlowElement
		/// <summary>
		/// Gets a list of FlowFrom.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FlowElement> GetFlowFrom(FlowElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(element, FlowToDomainRoleId);
		}
		#endregion
		#region FlowTo domain role code
		
		/// <summary>
		/// FlowTo domain role Id.
		/// </summary>
		public static readonly global::System.Guid FlowToDomainRoleId = new global::System.Guid(0x1ca64ed3, 0xf939, 0x4ab4, 0xba, 0xa5, 0x0f, 0x58, 0x8c, 0xec, 0xca, 0x4a);
		
		/// <summary>
		/// DomainRole FlowTo
		/// Description for Sawczyn.Sequencer.Flow.FlowTo
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.Sequencer.Flow/FlowTo.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.Sequencer.Flow/FlowTo.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FlowFrom", PropertyDisplayNameKey="Sawczyn.Sequencer.Flow/FlowTo.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1ca64ed3-f939-4ab4-baa5-0f588cecca4a")]
		public virtual FlowElement FlowTo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, FlowToDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FlowToDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FlowTo of a FlowElement
		/// <summary>
		/// Gets a list of FlowTo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FlowElement> GetFlowTo(FlowElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(element, FlowFromDomainRoleId);
		}
		#endregion
		#region Guard domain property code
		
		/// <summary>
		/// Guard domain property Id.
		/// </summary>
		public static readonly global::System.Guid GuardDomainPropertyId = new global::System.Guid(0x52e92455, 0xaddc, 0x422e, 0xa4, 0x3f, 0x9a, 0xd8, 0xcc, 0x48, 0xd1, 0x3c);
		
		/// <summary>
		/// Storage for Guard
		/// </summary>
		private global::System.String guardPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Guard domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.Sequencer.Flow/Guard.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.Sequencer.Flow/Guard.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("52e92455-addc-422e-a43f-9ad8cc48d13c")]
		public global::System.String Guard
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return guardPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				GuardPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Flow.Guard domain property.
		/// </summary>
		internal sealed partial class GuardPropertyHandler : DslModeling::DomainPropertyValueHandler<Flow, global::System.String>
		{
			private GuardPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Flow.Guard domain property value handler.
			/// </summary>
			public static readonly GuardPropertyHandler Instance = new GuardPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Flow.Guard domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GuardDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Flow element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.guardPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Flow element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.guardPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region FlowFrom link accessor
		/// <summary>
		/// Get the list of Flow links to a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.Sequencer.Flow> GetLinksToFlowTo ( global::Sawczyn.Sequencer.FlowElement flowFromInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.Flow>(flowFromInstance, global::Sawczyn.Sequencer.Flow.FlowFromDomainRoleId);
		}
		#endregion
		#region FlowTo link accessor
		/// <summary>
		/// Get the list of Flow links to a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.Sequencer.Flow> GetLinksToFlowFrom ( global::Sawczyn.Sequencer.FlowElement flowToInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.Flow>(flowToInstance, global::Sawczyn.Sequencer.Flow.FlowToDomainRoleId);
		}
		#endregion
		#region Flow instance accessors
		
		/// <summary>
		/// Get any Flow links between a given FlowElement and a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.Sequencer.Flow> GetLinks( global::Sawczyn.Sequencer.FlowElement source, global::Sawczyn.Sequencer.FlowElement target )
		{
			global::System.Collections.Generic.List<global::Sawczyn.Sequencer.Flow> outLinks = new global::System.Collections.Generic.List<global::Sawczyn.Sequencer.Flow>();
			global::System.Collections.Generic.IList<global::Sawczyn.Sequencer.Flow> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.Flow>(source, global::Sawczyn.Sequencer.Flow.FlowFromDomainRoleId);
			foreach ( global::Sawczyn.Sequencer.Flow link in links )
			{
				if ( target.Equals(link.FlowTo) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Flow link between a given FlowElementand a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.Sequencer.Flow GetLink( global::Sawczyn.Sequencer.FlowElement source, global::Sawczyn.Sequencer.FlowElement target )
		{
			global::System.Collections.Generic.IList<global::Sawczyn.Sequencer.Flow> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.Flow>(source, global::Sawczyn.Sequencer.Flow.FlowFromDomainRoleId);
			foreach ( global::Sawczyn.Sequencer.Flow link in links )
			{
				if ( target.Equals(link.FlowTo) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Sawczyn.Sequencer
{
	/// <summary>
	/// DomainRelationship SequenceDiagramHasComments
	/// Description for Sawczyn.Sequencer.SequenceDiagramHasComments
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.Sequencer.SequenceDiagramHasComments.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.Sequencer.SequenceDiagramHasComments.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.Sequencer.SequencerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f93c2a7b-4f8d-453d-b7a8-d9d926b2f818")]
	public partial class SequenceDiagramHasComments : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SequenceDiagramHasComments domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf93c2a7b, 0x4f8d, 0x453d, 0xb7, 0xa8, 0xd9, 0xd9, 0x26, 0xb2, 0xf8, 0x18);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SequenceDiagramHasComments link in the same Partition as the given SequenceDiagram
		/// </summary>
		/// <param name="source">SequenceDiagram to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public SequenceDiagramHasComments(SequenceDiagram source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SequenceDiagramHasComments.SequenceDiagramDomainRoleId, source), new DslModeling::RoleAssignment(SequenceDiagramHasComments.CommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SequenceDiagramHasComments(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SequenceDiagramHasComments(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SequenceDiagramHasComments(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SequenceDiagramHasComments(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SequenceDiagram domain role code
		
		/// <summary>
		/// SequenceDiagram domain role Id.
		/// </summary>
		public static readonly global::System.Guid SequenceDiagramDomainRoleId = new global::System.Guid(0x9a22e614, 0x8060, 0x4283, 0x9c, 0xd9, 0x00, 0x87, 0xf0, 0x18, 0x59, 0x6b);
		
		/// <summary>
		/// DomainRole SequenceDiagram
		/// Description for Sawczyn.Sequencer.SequenceDiagramHasComments.SequenceDiagram
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.Sequencer.SequenceDiagramHasComments/SequenceDiagram.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.Sequencer.SequenceDiagramHasComments/SequenceDiagram.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Comments", PropertyDisplayNameKey="Sawczyn.Sequencer.SequenceDiagramHasComments/SequenceDiagram.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9a22e614-8060-4283-9cd9-0087f018596b")]
		public virtual SequenceDiagram SequenceDiagram
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SequenceDiagram)DslModeling::DomainRoleInfo.GetRolePlayer(this, SequenceDiagramDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SequenceDiagramDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SequenceDiagram of a Comment
		/// <summary>
		/// Gets SequenceDiagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SequenceDiagram GetSequenceDiagram(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as SequenceDiagram;
		}
		
		/// <summary>
		/// Sets SequenceDiagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSequenceDiagram(Comment element, SequenceDiagram newSequenceDiagram)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newSequenceDiagram);
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x11eb6d29, 0xe992, 0x432e, 0x8b, 0x9e, 0x60, 0xf4, 0x05, 0xc7, 0x30, 0xc2);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for Sawczyn.Sequencer.SequenceDiagramHasComments.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.Sequencer.SequenceDiagramHasComments/Comment.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.Sequencer.SequenceDiagramHasComments/Comment.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SequenceDiagram", PropertyDisplayNameKey="Sawczyn.Sequencer.SequenceDiagramHasComments/Comment.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("11eb6d29-e992-432e-8b9e-60f405c730c2")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a SequenceDiagram
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(SequenceDiagram element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, SequenceDiagramDomainRoleId);
		}
		#endregion
		#region SequenceDiagram link accessor
		/// <summary>
		/// Get the list of SequenceDiagramHasComments links to a SequenceDiagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.Sequencer.SequenceDiagramHasComments> GetLinksToComments ( global::Sawczyn.Sequencer.SequenceDiagram sequenceDiagramInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.SequenceDiagramHasComments>(sequenceDiagramInstance, global::Sawczyn.Sequencer.SequenceDiagramHasComments.SequenceDiagramDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the SequenceDiagramHasComments link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.Sequencer.SequenceDiagramHasComments GetLinkToSequenceDiagram (global::Sawczyn.Sequencer.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::Sawczyn.Sequencer.SequenceDiagramHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.SequenceDiagramHasComments>(commentInstance, global::Sawczyn.Sequencer.SequenceDiagramHasComments.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SequenceDiagramHasComments instance accessors
		
		/// <summary>
		/// Get any SequenceDiagramHasComments links between a given SequenceDiagram and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.Sequencer.SequenceDiagramHasComments> GetLinks( global::Sawczyn.Sequencer.SequenceDiagram source, global::Sawczyn.Sequencer.Comment target )
		{
			global::System.Collections.Generic.List<global::Sawczyn.Sequencer.SequenceDiagramHasComments> outLinks = new global::System.Collections.Generic.List<global::Sawczyn.Sequencer.SequenceDiagramHasComments>();
			global::System.Collections.Generic.IList<global::Sawczyn.Sequencer.SequenceDiagramHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.SequenceDiagramHasComments>(source, global::Sawczyn.Sequencer.SequenceDiagramHasComments.SequenceDiagramDomainRoleId);
			foreach ( global::Sawczyn.Sequencer.SequenceDiagramHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SequenceDiagramHasComments link between a given SequenceDiagramand a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.Sequencer.SequenceDiagramHasComments GetLink( global::Sawczyn.Sequencer.SequenceDiagram source, global::Sawczyn.Sequencer.Comment target )
		{
			global::System.Collections.Generic.IList<global::Sawczyn.Sequencer.SequenceDiagramHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.SequenceDiagramHasComments>(source, global::Sawczyn.Sequencer.SequenceDiagramHasComments.SequenceDiagramDomainRoleId);
			foreach ( global::Sawczyn.Sequencer.SequenceDiagramHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Sawczyn.Sequencer
{
	/// <summary>
	/// DomainRelationship SequenceDiagramHasClasses
	/// The set of classes (represented by swim lanes) in the task flow.
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.Sequencer.SequenceDiagramHasClasses.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.Sequencer.SequenceDiagramHasClasses.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.Sequencer.SequencerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("409cad13-4f15-4c9c-a829-824f1387f071")]
	public partial class SequenceDiagramHasClasses : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SequenceDiagramHasClasses domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x409cad13, 0x4f15, 0x4c9c, 0xa8, 0x29, 0x82, 0x4f, 0x13, 0x87, 0xf0, 0x71);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SequenceDiagramHasClasses link in the same Partition as the given SequenceDiagram
		/// </summary>
		/// <param name="source">SequenceDiagram to use as the source of the relationship.</param>
		/// <param name="target">Class to use as the target of the relationship.</param>
		public SequenceDiagramHasClasses(SequenceDiagram source, Class target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SequenceDiagramHasClasses.SequenceDiagramDomainRoleId, source), new DslModeling::RoleAssignment(SequenceDiagramHasClasses.ClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SequenceDiagramHasClasses(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SequenceDiagramHasClasses(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SequenceDiagramHasClasses(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SequenceDiagramHasClasses(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SequenceDiagram domain role code
		
		/// <summary>
		/// SequenceDiagram domain role Id.
		/// </summary>
		public static readonly global::System.Guid SequenceDiagramDomainRoleId = new global::System.Guid(0xb948d22b, 0x8abe, 0x466d, 0x8f, 0xca, 0x03, 0x66, 0x4c, 0xf3, 0xcf, 0x6b);
		
		/// <summary>
		/// DomainRole SequenceDiagram
		/// Description for Sawczyn.Sequencer.SequenceDiagramHasClasses.SequenceDiagram
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.Sequencer.SequenceDiagramHasClasses/SequenceDiagram.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.Sequencer.SequenceDiagramHasClasses/SequenceDiagram.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Classed", PropertyDisplayNameKey="Sawczyn.Sequencer.SequenceDiagramHasClasses/SequenceDiagram.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b948d22b-8abe-466d-8fca-03664cf3cf6b")]
		public virtual SequenceDiagram SequenceDiagram
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SequenceDiagram)DslModeling::DomainRoleInfo.GetRolePlayer(this, SequenceDiagramDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SequenceDiagramDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SequenceDiagram of a Class
		/// <summary>
		/// Gets SequenceDiagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SequenceDiagram GetSequenceDiagram(Class element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ClassDomainRoleId) as SequenceDiagram;
		}
		
		/// <summary>
		/// Sets SequenceDiagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSequenceDiagram(Class element, SequenceDiagram newSequenceDiagram)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ClassDomainRoleId, newSequenceDiagram);
		}
		#endregion
		#region Class domain role code
		
		/// <summary>
		/// Class domain role Id.
		/// </summary>
		public static readonly global::System.Guid ClassDomainRoleId = new global::System.Guid(0x95ae747b, 0x7038, 0x49e8, 0x87, 0x09, 0xce, 0xaf, 0x3a, 0xe0, 0x18, 0x65);
		
		/// <summary>
		/// DomainRole Class
		/// Description for Sawczyn.Sequencer.SequenceDiagramHasClasses.Class
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.Sequencer.SequenceDiagramHasClasses/Class.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.Sequencer.SequenceDiagramHasClasses/Class.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SequenceDiagram", PropertyDisplayNameKey="Sawczyn.Sequencer.SequenceDiagramHasClasses/Class.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("95ae747b-7038-49e8-8709-ceaf3ae01865")]
		public virtual Class Class
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Class)DslModeling::DomainRoleInfo.GetRolePlayer(this, ClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Classed of a SequenceDiagram
		/// <summary>
		/// Gets a list of Classed.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Class> GetClassed(SequenceDiagram element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Class>, Class>(element, SequenceDiagramDomainRoleId);
		}
		#endregion
		#region SequenceDiagram link accessor
		/// <summary>
		/// Get the list of SequenceDiagramHasClasses links to a SequenceDiagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.Sequencer.SequenceDiagramHasClasses> GetLinksToClassed ( global::Sawczyn.Sequencer.SequenceDiagram sequenceDiagramInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.SequenceDiagramHasClasses>(sequenceDiagramInstance, global::Sawczyn.Sequencer.SequenceDiagramHasClasses.SequenceDiagramDomainRoleId);
		}
		#endregion
		#region Class link accessor
		/// <summary>
		/// Get the SequenceDiagramHasClasses link to a Class.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.Sequencer.SequenceDiagramHasClasses GetLinkToSequenceDiagram (global::Sawczyn.Sequencer.Class classInstance)
		{
			global::System.Collections.Generic.IList<global::Sawczyn.Sequencer.SequenceDiagramHasClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.SequenceDiagramHasClasses>(classInstance, global::Sawczyn.Sequencer.SequenceDiagramHasClasses.ClassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Class not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SequenceDiagramHasClasses instance accessors
		
		/// <summary>
		/// Get any SequenceDiagramHasClasses links between a given SequenceDiagram and a Class.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.Sequencer.SequenceDiagramHasClasses> GetLinks( global::Sawczyn.Sequencer.SequenceDiagram source, global::Sawczyn.Sequencer.Class target )
		{
			global::System.Collections.Generic.List<global::Sawczyn.Sequencer.SequenceDiagramHasClasses> outLinks = new global::System.Collections.Generic.List<global::Sawczyn.Sequencer.SequenceDiagramHasClasses>();
			global::System.Collections.Generic.IList<global::Sawczyn.Sequencer.SequenceDiagramHasClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.SequenceDiagramHasClasses>(source, global::Sawczyn.Sequencer.SequenceDiagramHasClasses.SequenceDiagramDomainRoleId);
			foreach ( global::Sawczyn.Sequencer.SequenceDiagramHasClasses link in links )
			{
				if ( target.Equals(link.Class) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SequenceDiagramHasClasses link between a given SequenceDiagramand a Class.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.Sequencer.SequenceDiagramHasClasses GetLink( global::Sawczyn.Sequencer.SequenceDiagram source, global::Sawczyn.Sequencer.Class target )
		{
			global::System.Collections.Generic.IList<global::Sawczyn.Sequencer.SequenceDiagramHasClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.SequenceDiagramHasClasses>(source, global::Sawczyn.Sequencer.SequenceDiagramHasClasses.SequenceDiagramDomainRoleId);
			foreach ( global::Sawczyn.Sequencer.SequenceDiagramHasClasses link in links )
			{
				if ( target.Equals(link.Class) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Sawczyn.Sequencer
{
	/// <summary>
	/// DomainRelationship CommentReferencesSubjects
	/// Description for Sawczyn.Sequencer.CommentReferencesSubjects
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.Sequencer.CommentReferencesSubjects.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.Sequencer.CommentReferencesSubjects.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.Sequencer.SequencerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("23aa51a6-029f-465b-a4fd-23b480099b84")]
	public partial class CommentReferencesSubjects : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentReferencesSubjects domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x23aa51a6, 0x029f, 0x465b, 0xa4, 0xfd, 0x23, 0xb4, 0x80, 0x09, 0x9b, 0x84);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentReferencesSubjects link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">FlowElement to use as the target of the relationship.</param>
		public CommentReferencesSubjects(Comment source, FlowElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentReferencesSubjects.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentReferencesSubjects.SubjectDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesSubjects(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesSubjects(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesSubjects(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesSubjects(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x44310148, 0x7dfc, 0x4b30, 0x97, 0x32, 0x23, 0x88, 0x06, 0x43, 0xa5, 0x57);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for Sawczyn.Sequencer.CommentReferencesSubjects.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.Sequencer.CommentReferencesSubjects/Comment.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.Sequencer.CommentReferencesSubjects/Comment.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subjects", PropertyDisplayNameKey="Sawczyn.Sequencer.CommentReferencesSubjects/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("44310148-7dfc-4b30-9732-23880643a557")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a FlowElement
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(FlowElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, SubjectDomainRoleId);
		}
		#endregion
		#region Subject domain role code
		
		/// <summary>
		/// Subject domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubjectDomainRoleId = new global::System.Guid(0xc58292b0, 0xc9eb, 0x4b29, 0x83, 0x66, 0x47, 0xa1, 0x48, 0x9c, 0x35, 0x02);
		
		/// <summary>
		/// DomainRole Subject
		/// Description for Sawczyn.Sequencer.CommentReferencesSubjects.Subject
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.Sequencer.CommentReferencesSubjects/Subject.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.Sequencer.CommentReferencesSubjects/Subject.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Comments", PropertyDisplayNameKey="Sawczyn.Sequencer.CommentReferencesSubjects/Subject.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c58292b0-c9eb-4b29-8366-47a1489c3502")]
		public virtual FlowElement Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubjectDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubjectDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subjects of a Comment
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FlowElement> GetSubjects(Comment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(element, CommentDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the list of CommentReferencesSubjects links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.Sequencer.CommentReferencesSubjects> GetLinksToSubjects ( global::Sawczyn.Sequencer.Comment commentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.CommentReferencesSubjects>(commentInstance, global::Sawczyn.Sequencer.CommentReferencesSubjects.CommentDomainRoleId);
		}
		#endregion
		#region Subject link accessor
		/// <summary>
		/// Get the list of CommentReferencesSubjects links to a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.Sequencer.CommentReferencesSubjects> GetLinksToComments ( global::Sawczyn.Sequencer.FlowElement subjectInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.CommentReferencesSubjects>(subjectInstance, global::Sawczyn.Sequencer.CommentReferencesSubjects.SubjectDomainRoleId);
		}
		#endregion
		#region CommentReferencesSubjects instance accessors
		
		/// <summary>
		/// Get any CommentReferencesSubjects links between a given Comment and a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.Sequencer.CommentReferencesSubjects> GetLinks( global::Sawczyn.Sequencer.Comment source, global::Sawczyn.Sequencer.FlowElement target )
		{
			global::System.Collections.Generic.List<global::Sawczyn.Sequencer.CommentReferencesSubjects> outLinks = new global::System.Collections.Generic.List<global::Sawczyn.Sequencer.CommentReferencesSubjects>();
			global::System.Collections.Generic.IList<global::Sawczyn.Sequencer.CommentReferencesSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.CommentReferencesSubjects>(source, global::Sawczyn.Sequencer.CommentReferencesSubjects.CommentDomainRoleId);
			foreach ( global::Sawczyn.Sequencer.CommentReferencesSubjects link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentReferencesSubjects link between a given Commentand a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.Sequencer.CommentReferencesSubjects GetLink( global::Sawczyn.Sequencer.Comment source, global::Sawczyn.Sequencer.FlowElement target )
		{
			global::System.Collections.Generic.IList<global::Sawczyn.Sequencer.CommentReferencesSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.CommentReferencesSubjects>(source, global::Sawczyn.Sequencer.CommentReferencesSubjects.CommentDomainRoleId);
			foreach ( global::Sawczyn.Sequencer.CommentReferencesSubjects link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Sawczyn.Sequencer
{
	/// <summary>
	/// DomainRelationship ClassHasFlowElements
	/// Description for Sawczyn.Sequencer.ClassHasFlowElements
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.Sequencer.ClassHasFlowElements.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.Sequencer.ClassHasFlowElements.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.Sequencer.SequencerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("b999641e-8fce-41ef-9de2-5cc3a76b70e1")]
	public partial class ClassHasFlowElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ClassHasFlowElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb999641e, 0x8fce, 0x41ef, 0x9d, 0xe2, 0x5c, 0xc3, 0xa7, 0x6b, 0x70, 0xe1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ClassHasFlowElements link in the same Partition as the given Class
		/// </summary>
		/// <param name="source">Class to use as the source of the relationship.</param>
		/// <param name="target">FlowElement to use as the target of the relationship.</param>
		public ClassHasFlowElements(Class source, FlowElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ClassHasFlowElements.ClassDomainRoleId, source), new DslModeling::RoleAssignment(ClassHasFlowElements.FlowElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassHasFlowElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassHasFlowElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassHasFlowElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassHasFlowElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Class domain role code
		
		/// <summary>
		/// Class domain role Id.
		/// </summary>
		public static readonly global::System.Guid ClassDomainRoleId = new global::System.Guid(0xfc37ca9a, 0x2144, 0x4510, 0x96, 0xa8, 0xf6, 0xec, 0x85, 0xa8, 0xb1, 0x0a);
		
		/// <summary>
		/// DomainRole Class
		/// Description for Sawczyn.Sequencer.ClassHasFlowElements.Class
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.Sequencer.ClassHasFlowElements/Class.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.Sequencer.ClassHasFlowElements/Class.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FlowElements", PropertyDisplayNameKey="Sawczyn.Sequencer.ClassHasFlowElements/Class.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("fc37ca9a-2144-4510-96a8-f6ec85a8b10a")]
		public virtual Class Class
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Class)DslModeling::DomainRoleInfo.GetRolePlayer(this, ClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Class of a FlowElement
		/// <summary>
		/// Gets Class.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Class GetClass(FlowElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FlowElementDomainRoleId) as Class;
		}
		
		/// <summary>
		/// Sets Class.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetClass(FlowElement element, Class newClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FlowElementDomainRoleId, newClass);
		}
		#endregion
		#region FlowElement domain role code
		
		/// <summary>
		/// FlowElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid FlowElementDomainRoleId = new global::System.Guid(0xd4a9c985, 0x41e9, 0x4151, 0x9e, 0x20, 0xc8, 0xd0, 0x3c, 0x96, 0x26, 0xc5);
		
		/// <summary>
		/// DomainRole FlowElement
		/// Description for Sawczyn.Sequencer.ClassHasFlowElements.FlowElement
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.Sequencer.ClassHasFlowElements/FlowElement.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.Sequencer.ClassHasFlowElements/FlowElement.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Class", PropertyDisplayNameKey="Sawczyn.Sequencer.ClassHasFlowElements/FlowElement.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d4a9c985-41e9-4151-9e20-c8d03c9626c5")]
		public virtual FlowElement FlowElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, FlowElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FlowElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FlowElements of a Class
		/// <summary>
		/// Gets a list of FlowElements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FlowElement> GetFlowElements(Class element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(element, ClassDomainRoleId);
		}
		#endregion
		#region Class link accessor
		/// <summary>
		/// Get the list of ClassHasFlowElements links to a Class.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.Sequencer.ClassHasFlowElements> GetLinksToFlowElements ( global::Sawczyn.Sequencer.Class classInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.ClassHasFlowElements>(classInstance, global::Sawczyn.Sequencer.ClassHasFlowElements.ClassDomainRoleId);
		}
		#endregion
		#region FlowElement link accessor
		/// <summary>
		/// Get the ClassHasFlowElements link to a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.Sequencer.ClassHasFlowElements GetLinkToClass (global::Sawczyn.Sequencer.FlowElement flowElementInstance)
		{
			global::System.Collections.Generic.IList<global::Sawczyn.Sequencer.ClassHasFlowElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.ClassHasFlowElements>(flowElementInstance, global::Sawczyn.Sequencer.ClassHasFlowElements.FlowElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FlowElement not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ClassHasFlowElements instance accessors
		
		/// <summary>
		/// Get any ClassHasFlowElements links between a given Class and a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.Sequencer.ClassHasFlowElements> GetLinks( global::Sawczyn.Sequencer.Class source, global::Sawczyn.Sequencer.FlowElement target )
		{
			global::System.Collections.Generic.List<global::Sawczyn.Sequencer.ClassHasFlowElements> outLinks = new global::System.Collections.Generic.List<global::Sawczyn.Sequencer.ClassHasFlowElements>();
			global::System.Collections.Generic.IList<global::Sawczyn.Sequencer.ClassHasFlowElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.ClassHasFlowElements>(source, global::Sawczyn.Sequencer.ClassHasFlowElements.ClassDomainRoleId);
			foreach ( global::Sawczyn.Sequencer.ClassHasFlowElements link in links )
			{
				if ( target.Equals(link.FlowElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ClassHasFlowElements link between a given Classand a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.Sequencer.ClassHasFlowElements GetLink( global::Sawczyn.Sequencer.Class source, global::Sawczyn.Sequencer.FlowElement target )
		{
			global::System.Collections.Generic.IList<global::Sawczyn.Sequencer.ClassHasFlowElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.ClassHasFlowElements>(source, global::Sawczyn.Sequencer.ClassHasFlowElements.ClassDomainRoleId);
			foreach ( global::Sawczyn.Sequencer.ClassHasFlowElements link in links )
			{
				if ( target.Equals(link.FlowElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
