//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Sawczyn.Sequencer
{
	/// <summary>
	/// DomainRelationship SequenceDiagramHasComments
	/// Description for Sawczyn.Sequencer.SequenceDiagramHasComments
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.Sequencer.SequenceDiagramHasComments.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.Sequencer.SequenceDiagramHasComments.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.Sequencer.SequencerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("8cba5f0d-4e66-4534-9dcd-9bd3e105cbde")]
	public partial class SequenceDiagramHasComments : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SequenceDiagramHasComments domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8cba5f0d, 0x4e66, 0x4534, 0x9d, 0xcd, 0x9b, 0xd3, 0xe1, 0x05, 0xcb, 0xde);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SequenceDiagramHasComments link in the same Partition as the given SequenceDiagram
		/// </summary>
		/// <param name="source">SequenceDiagram to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public SequenceDiagramHasComments(SequenceDiagram source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SequenceDiagramHasComments.SequenceDiagramDomainRoleId, source), new DslModeling::RoleAssignment(SequenceDiagramHasComments.CommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SequenceDiagramHasComments(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SequenceDiagramHasComments(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SequenceDiagramHasComments(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SequenceDiagramHasComments(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SequenceDiagram domain role code
		
		/// <summary>
		/// SequenceDiagram domain role Id.
		/// </summary>
		public static readonly global::System.Guid SequenceDiagramDomainRoleId = new global::System.Guid(0x5219c5b0, 0xdeb4, 0x4763, 0xa1, 0xb6, 0x95, 0xfe, 0xc7, 0xdc, 0x2a, 0x45);
		
		/// <summary>
		/// DomainRole SequenceDiagram
		/// Description for Sawczyn.Sequencer.SequenceDiagramHasComments.SequenceDiagram
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.Sequencer.SequenceDiagramHasComments/SequenceDiagram.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.Sequencer.SequenceDiagramHasComments/SequenceDiagram.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Comments", PropertyDisplayNameKey="Sawczyn.Sequencer.SequenceDiagramHasComments/SequenceDiagram.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5219c5b0-deb4-4763-a1b6-95fec7dc2a45")]
		public virtual SequenceDiagram SequenceDiagram
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SequenceDiagram)DslModeling::DomainRoleInfo.GetRolePlayer(this, SequenceDiagramDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SequenceDiagramDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SequenceDiagram of a Comment
		/// <summary>
		/// Gets SequenceDiagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SequenceDiagram GetSequenceDiagram(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as SequenceDiagram;
		}
		
		/// <summary>
		/// Sets SequenceDiagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSequenceDiagram(Comment element, SequenceDiagram newSequenceDiagram)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newSequenceDiagram);
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x4b7b34bf, 0x25ae, 0x4b9e, 0x91, 0xab, 0x54, 0x08, 0xc6, 0xbf, 0xa7, 0x22);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for Sawczyn.Sequencer.SequenceDiagramHasComments.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.Sequencer.SequenceDiagramHasComments/Comment.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.Sequencer.SequenceDiagramHasComments/Comment.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SequenceDiagram", PropertyDisplayNameKey="Sawczyn.Sequencer.SequenceDiagramHasComments/Comment.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4b7b34bf-25ae-4b9e-91ab-5408c6bfa722")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a SequenceDiagram
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(SequenceDiagram element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, SequenceDiagramDomainRoleId);
		}
		#endregion
		#region SequenceDiagram link accessor
		/// <summary>
		/// Get the list of SequenceDiagramHasComments links to a SequenceDiagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.Sequencer.SequenceDiagramHasComments> GetLinksToComments ( global::Sawczyn.Sequencer.SequenceDiagram sequenceDiagramInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.SequenceDiagramHasComments>(sequenceDiagramInstance, global::Sawczyn.Sequencer.SequenceDiagramHasComments.SequenceDiagramDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the SequenceDiagramHasComments link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.Sequencer.SequenceDiagramHasComments GetLinkToSequenceDiagram (global::Sawczyn.Sequencer.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::Sawczyn.Sequencer.SequenceDiagramHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.SequenceDiagramHasComments>(commentInstance, global::Sawczyn.Sequencer.SequenceDiagramHasComments.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SequenceDiagramHasComments instance accessors
		
		/// <summary>
		/// Get any SequenceDiagramHasComments links between a given SequenceDiagram and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.Sequencer.SequenceDiagramHasComments> GetLinks( global::Sawczyn.Sequencer.SequenceDiagram source, global::Sawczyn.Sequencer.Comment target )
		{
			global::System.Collections.Generic.List<global::Sawczyn.Sequencer.SequenceDiagramHasComments> outLinks = new global::System.Collections.Generic.List<global::Sawczyn.Sequencer.SequenceDiagramHasComments>();
			global::System.Collections.Generic.IList<global::Sawczyn.Sequencer.SequenceDiagramHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.SequenceDiagramHasComments>(source, global::Sawczyn.Sequencer.SequenceDiagramHasComments.SequenceDiagramDomainRoleId);
			foreach ( global::Sawczyn.Sequencer.SequenceDiagramHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SequenceDiagramHasComments link between a given SequenceDiagramand a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.Sequencer.SequenceDiagramHasComments GetLink( global::Sawczyn.Sequencer.SequenceDiagram source, global::Sawczyn.Sequencer.Comment target )
		{
			global::System.Collections.Generic.IList<global::Sawczyn.Sequencer.SequenceDiagramHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.SequenceDiagramHasComments>(source, global::Sawczyn.Sequencer.SequenceDiagramHasComments.SequenceDiagramDomainRoleId);
			foreach ( global::Sawczyn.Sequencer.SequenceDiagramHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Sawczyn.Sequencer
{
	/// <summary>
	/// DomainRelationship SequenceDiagramHasClasses
	/// The set of actors (represented by swim lanes) in the task flow.
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.Sequencer.SequenceDiagramHasClasses.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.Sequencer.SequenceDiagramHasClasses.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.Sequencer.SequencerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("626eb8cd-b00c-4c89-ab96-432d2571a1e2")]
	public partial class SequenceDiagramHasClasses : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SequenceDiagramHasClasses domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x626eb8cd, 0xb00c, 0x4c89, 0xab, 0x96, 0x43, 0x2d, 0x25, 0x71, 0xa1, 0xe2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SequenceDiagramHasClasses link in the same Partition as the given SequenceDiagram
		/// </summary>
		/// <param name="source">SequenceDiagram to use as the source of the relationship.</param>
		/// <param name="target">Class to use as the target of the relationship.</param>
		public SequenceDiagramHasClasses(SequenceDiagram source, Class target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SequenceDiagramHasClasses.SequenceDiagramDomainRoleId, source), new DslModeling::RoleAssignment(SequenceDiagramHasClasses.ClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SequenceDiagramHasClasses(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SequenceDiagramHasClasses(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SequenceDiagramHasClasses(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SequenceDiagramHasClasses(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SequenceDiagram domain role code
		
		/// <summary>
		/// SequenceDiagram domain role Id.
		/// </summary>
		public static readonly global::System.Guid SequenceDiagramDomainRoleId = new global::System.Guid(0x8d49b1ce, 0x87b9, 0x4b80, 0xba, 0xda, 0x57, 0x52, 0xf2, 0x78, 0x42, 0x88);
		
		/// <summary>
		/// DomainRole SequenceDiagram
		/// Description for Sawczyn.Sequencer.SequenceDiagramHasClasses.SequenceDiagram
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.Sequencer.SequenceDiagramHasClasses/SequenceDiagram.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.Sequencer.SequenceDiagramHasClasses/SequenceDiagram.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Classed", PropertyDisplayNameKey="Sawczyn.Sequencer.SequenceDiagramHasClasses/SequenceDiagram.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8d49b1ce-87b9-4b80-bada-5752f2784288")]
		public virtual SequenceDiagram SequenceDiagram
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SequenceDiagram)DslModeling::DomainRoleInfo.GetRolePlayer(this, SequenceDiagramDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SequenceDiagramDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SequenceDiagram of a Class
		/// <summary>
		/// Gets SequenceDiagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SequenceDiagram GetSequenceDiagram(Class element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ClassDomainRoleId) as SequenceDiagram;
		}
		
		/// <summary>
		/// Sets SequenceDiagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSequenceDiagram(Class element, SequenceDiagram newSequenceDiagram)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ClassDomainRoleId, newSequenceDiagram);
		}
		#endregion
		#region Class domain role code
		
		/// <summary>
		/// Class domain role Id.
		/// </summary>
		public static readonly global::System.Guid ClassDomainRoleId = new global::System.Guid(0x6d8c679d, 0xfdba, 0x4c92, 0xa4, 0x8b, 0x00, 0x65, 0xf3, 0x4d, 0x1e, 0xb9);
		
		/// <summary>
		/// DomainRole Class
		/// Description for Sawczyn.Sequencer.SequenceDiagramHasClasses.Class
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.Sequencer.SequenceDiagramHasClasses/Class.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.Sequencer.SequenceDiagramHasClasses/Class.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SequenceDiagram", PropertyDisplayNameKey="Sawczyn.Sequencer.SequenceDiagramHasClasses/Class.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6d8c679d-fdba-4c92-a48b-0065f34d1eb9")]
		public virtual Class Class
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Class)DslModeling::DomainRoleInfo.GetRolePlayer(this, ClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Classed of a SequenceDiagram
		/// <summary>
		/// Gets a list of Classed.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Class> GetClassed(SequenceDiagram element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Class>, Class>(element, SequenceDiagramDomainRoleId);
		}
		#endregion
		#region SequenceDiagram link accessor
		/// <summary>
		/// Get the list of SequenceDiagramHasClasses links to a SequenceDiagram.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.Sequencer.SequenceDiagramHasClasses> GetLinksToClassed ( global::Sawczyn.Sequencer.SequenceDiagram sequenceDiagramInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.SequenceDiagramHasClasses>(sequenceDiagramInstance, global::Sawczyn.Sequencer.SequenceDiagramHasClasses.SequenceDiagramDomainRoleId);
		}
		#endregion
		#region Class link accessor
		/// <summary>
		/// Get the SequenceDiagramHasClasses link to a Class.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.Sequencer.SequenceDiagramHasClasses GetLinkToSequenceDiagram (global::Sawczyn.Sequencer.Class classInstance)
		{
			global::System.Collections.Generic.IList<global::Sawczyn.Sequencer.SequenceDiagramHasClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.SequenceDiagramHasClasses>(classInstance, global::Sawczyn.Sequencer.SequenceDiagramHasClasses.ClassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Class not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SequenceDiagramHasClasses instance accessors
		
		/// <summary>
		/// Get any SequenceDiagramHasClasses links between a given SequenceDiagram and a Class.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.Sequencer.SequenceDiagramHasClasses> GetLinks( global::Sawczyn.Sequencer.SequenceDiagram source, global::Sawczyn.Sequencer.Class target )
		{
			global::System.Collections.Generic.List<global::Sawczyn.Sequencer.SequenceDiagramHasClasses> outLinks = new global::System.Collections.Generic.List<global::Sawczyn.Sequencer.SequenceDiagramHasClasses>();
			global::System.Collections.Generic.IList<global::Sawczyn.Sequencer.SequenceDiagramHasClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.SequenceDiagramHasClasses>(source, global::Sawczyn.Sequencer.SequenceDiagramHasClasses.SequenceDiagramDomainRoleId);
			foreach ( global::Sawczyn.Sequencer.SequenceDiagramHasClasses link in links )
			{
				if ( target.Equals(link.Class) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SequenceDiagramHasClasses link between a given SequenceDiagramand a Class.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.Sequencer.SequenceDiagramHasClasses GetLink( global::Sawczyn.Sequencer.SequenceDiagram source, global::Sawczyn.Sequencer.Class target )
		{
			global::System.Collections.Generic.IList<global::Sawczyn.Sequencer.SequenceDiagramHasClasses> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.SequenceDiagramHasClasses>(source, global::Sawczyn.Sequencer.SequenceDiagramHasClasses.SequenceDiagramDomainRoleId);
			foreach ( global::Sawczyn.Sequencer.SequenceDiagramHasClasses link in links )
			{
				if ( target.Equals(link.Class) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Sawczyn.Sequencer
{
	/// <summary>
	/// DomainRelationship CommentReferencesSubjects
	/// Description for Sawczyn.Sequencer.CommentReferencesSubjects
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.Sequencer.CommentReferencesSubjects.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.Sequencer.CommentReferencesSubjects.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.Sequencer.SequencerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f842afde-b5cf-4ac3-85be-694d355f478b")]
	public partial class CommentReferencesSubjects : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentReferencesSubjects domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf842afde, 0xb5cf, 0x4ac3, 0x85, 0xbe, 0x69, 0x4d, 0x35, 0x5f, 0x47, 0x8b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentReferencesSubjects link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">FlowElement to use as the target of the relationship.</param>
		public CommentReferencesSubjects(Comment source, FlowElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentReferencesSubjects.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentReferencesSubjects.SubjectDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesSubjects(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesSubjects(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesSubjects(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesSubjects(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0xd9e024bd, 0xb80a, 0x4f73, 0x8d, 0xc1, 0x68, 0x64, 0xc9, 0x79, 0x2e, 0xef);
		
		/// <summary>
		/// DomainRole Comment
		/// Description for Sawczyn.Sequencer.CommentReferencesSubjects.Comment
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.Sequencer.CommentReferencesSubjects/Comment.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.Sequencer.CommentReferencesSubjects/Comment.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subjects", PropertyDisplayNameKey="Sawczyn.Sequencer.CommentReferencesSubjects/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d9e024bd-b80a-4f73-8dc1-6864c9792eef")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a FlowElement
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(FlowElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, SubjectDomainRoleId);
		}
		#endregion
		#region Subject domain role code
		
		/// <summary>
		/// Subject domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubjectDomainRoleId = new global::System.Guid(0x2198b1d4, 0x8277, 0x4044, 0xb9, 0x69, 0xba, 0x12, 0xa8, 0xba, 0x10, 0x87);
		
		/// <summary>
		/// DomainRole Subject
		/// Description for Sawczyn.Sequencer.CommentReferencesSubjects.Subject
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.Sequencer.CommentReferencesSubjects/Subject.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.Sequencer.CommentReferencesSubjects/Subject.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Comments", PropertyDisplayNameKey="Sawczyn.Sequencer.CommentReferencesSubjects/Subject.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2198b1d4-8277-4044-b969-ba12a8ba1087")]
		public virtual FlowElement Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubjectDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubjectDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subjects of a Comment
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FlowElement> GetSubjects(Comment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(element, CommentDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the list of CommentReferencesSubjects links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.Sequencer.CommentReferencesSubjects> GetLinksToSubjects ( global::Sawczyn.Sequencer.Comment commentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.CommentReferencesSubjects>(commentInstance, global::Sawczyn.Sequencer.CommentReferencesSubjects.CommentDomainRoleId);
		}
		#endregion
		#region Subject link accessor
		/// <summary>
		/// Get the list of CommentReferencesSubjects links to a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.Sequencer.CommentReferencesSubjects> GetLinksToComments ( global::Sawczyn.Sequencer.FlowElement subjectInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.CommentReferencesSubjects>(subjectInstance, global::Sawczyn.Sequencer.CommentReferencesSubjects.SubjectDomainRoleId);
		}
		#endregion
		#region CommentReferencesSubjects instance accessors
		
		/// <summary>
		/// Get any CommentReferencesSubjects links between a given Comment and a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.Sequencer.CommentReferencesSubjects> GetLinks( global::Sawczyn.Sequencer.Comment source, global::Sawczyn.Sequencer.FlowElement target )
		{
			global::System.Collections.Generic.List<global::Sawczyn.Sequencer.CommentReferencesSubjects> outLinks = new global::System.Collections.Generic.List<global::Sawczyn.Sequencer.CommentReferencesSubjects>();
			global::System.Collections.Generic.IList<global::Sawczyn.Sequencer.CommentReferencesSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.CommentReferencesSubjects>(source, global::Sawczyn.Sequencer.CommentReferencesSubjects.CommentDomainRoleId);
			foreach ( global::Sawczyn.Sequencer.CommentReferencesSubjects link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentReferencesSubjects link between a given Commentand a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.Sequencer.CommentReferencesSubjects GetLink( global::Sawczyn.Sequencer.Comment source, global::Sawczyn.Sequencer.FlowElement target )
		{
			global::System.Collections.Generic.IList<global::Sawczyn.Sequencer.CommentReferencesSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.CommentReferencesSubjects>(source, global::Sawczyn.Sequencer.CommentReferencesSubjects.CommentDomainRoleId);
			foreach ( global::Sawczyn.Sequencer.CommentReferencesSubjects link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Sawczyn.Sequencer
{
	/// <summary>
	/// DomainRelationship ClassHasFlowElements
	/// Description for Sawczyn.Sequencer.ClassHasFlowElements
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.Sequencer.ClassHasFlowElements.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.Sequencer.ClassHasFlowElements.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.Sequencer.SequencerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("2e49c774-a5ec-4c49-83d6-af0804062e68")]
	public partial class ClassHasFlowElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ClassHasFlowElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2e49c774, 0xa5ec, 0x4c49, 0x83, 0xd6, 0xaf, 0x08, 0x04, 0x06, 0x2e, 0x68);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ClassHasFlowElements link in the same Partition as the given Class
		/// </summary>
		/// <param name="source">Class to use as the source of the relationship.</param>
		/// <param name="target">FlowElement to use as the target of the relationship.</param>
		public ClassHasFlowElements(Class source, FlowElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ClassHasFlowElements.ClassDomainRoleId, source), new DslModeling::RoleAssignment(ClassHasFlowElements.FlowElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassHasFlowElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassHasFlowElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassHasFlowElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassHasFlowElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Class domain role code
		
		/// <summary>
		/// Class domain role Id.
		/// </summary>
		public static readonly global::System.Guid ClassDomainRoleId = new global::System.Guid(0x32a862d2, 0xbe4d, 0x4deb, 0xbd, 0x43, 0x57, 0xe4, 0x8f, 0x8f, 0x46, 0xf3);
		
		/// <summary>
		/// DomainRole Class
		/// Description for Sawczyn.Sequencer.ClassHasFlowElements.Class
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.Sequencer.ClassHasFlowElements/Class.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.Sequencer.ClassHasFlowElements/Class.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "FlowElements", PropertyDisplayNameKey="Sawczyn.Sequencer.ClassHasFlowElements/Class.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("32a862d2-be4d-4deb-bd43-57e48f8f46f3")]
		public virtual Class Class
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Class)DslModeling::DomainRoleInfo.GetRolePlayer(this, ClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Class of a FlowElement
		/// <summary>
		/// Gets Class.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Class GetClass(FlowElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FlowElementDomainRoleId) as Class;
		}
		
		/// <summary>
		/// Sets Class.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetClass(FlowElement element, Class newClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FlowElementDomainRoleId, newClass);
		}
		#endregion
		#region FlowElement domain role code
		
		/// <summary>
		/// FlowElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid FlowElementDomainRoleId = new global::System.Guid(0x66ed7de4, 0x90a7, 0x42e8, 0x96, 0x05, 0x8d, 0xb3, 0x88, 0xd2, 0x8a, 0xb3);
		
		/// <summary>
		/// DomainRole FlowElement
		/// Description for Sawczyn.Sequencer.ClassHasFlowElements.FlowElement
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.Sequencer.ClassHasFlowElements/FlowElement.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.Sequencer.ClassHasFlowElements/FlowElement.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Class", PropertyDisplayNameKey="Sawczyn.Sequencer.ClassHasFlowElements/FlowElement.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("66ed7de4-90a7-42e8-9605-8db388d28ab3")]
		public virtual FlowElement FlowElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, FlowElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FlowElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FlowElements of a Class
		/// <summary>
		/// Gets a list of FlowElements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FlowElement> GetFlowElements(Class element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(element, ClassDomainRoleId);
		}
		#endregion
		#region Class link accessor
		/// <summary>
		/// Get the list of ClassHasFlowElements links to a Class.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.Sequencer.ClassHasFlowElements> GetLinksToFlowElements ( global::Sawczyn.Sequencer.Class classInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.ClassHasFlowElements>(classInstance, global::Sawczyn.Sequencer.ClassHasFlowElements.ClassDomainRoleId);
		}
		#endregion
		#region FlowElement link accessor
		/// <summary>
		/// Get the ClassHasFlowElements link to a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.Sequencer.ClassHasFlowElements GetLinkToClass (global::Sawczyn.Sequencer.FlowElement flowElementInstance)
		{
			global::System.Collections.Generic.IList<global::Sawczyn.Sequencer.ClassHasFlowElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.ClassHasFlowElements>(flowElementInstance, global::Sawczyn.Sequencer.ClassHasFlowElements.FlowElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of FlowElement not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ClassHasFlowElements instance accessors
		
		/// <summary>
		/// Get any ClassHasFlowElements links between a given Class and a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.Sequencer.ClassHasFlowElements> GetLinks( global::Sawczyn.Sequencer.Class source, global::Sawczyn.Sequencer.FlowElement target )
		{
			global::System.Collections.Generic.List<global::Sawczyn.Sequencer.ClassHasFlowElements> outLinks = new global::System.Collections.Generic.List<global::Sawczyn.Sequencer.ClassHasFlowElements>();
			global::System.Collections.Generic.IList<global::Sawczyn.Sequencer.ClassHasFlowElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.ClassHasFlowElements>(source, global::Sawczyn.Sequencer.ClassHasFlowElements.ClassDomainRoleId);
			foreach ( global::Sawczyn.Sequencer.ClassHasFlowElements link in links )
			{
				if ( target.Equals(link.FlowElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ClassHasFlowElements link between a given Classand a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.Sequencer.ClassHasFlowElements GetLink( global::Sawczyn.Sequencer.Class source, global::Sawczyn.Sequencer.FlowElement target )
		{
			global::System.Collections.Generic.IList<global::Sawczyn.Sequencer.ClassHasFlowElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.ClassHasFlowElements>(source, global::Sawczyn.Sequencer.ClassHasFlowElements.ClassDomainRoleId);
			foreach ( global::Sawczyn.Sequencer.ClassHasFlowElements link in links )
			{
				if ( target.Equals(link.FlowElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Sawczyn.Sequencer
{
	/// <summary>
	/// DomainRelationship FlowElementsCallCallables
	/// Description for Sawczyn.Sequencer.FlowElementsCallCallables
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.Sequencer.FlowElementsCallCallables.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.Sequencer.FlowElementsCallCallables.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.Sequencer.SequencerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("32b2e182-8cd9-44b9-ac87-b69671bd7d54")]
	public partial class FlowElementsCallCallables : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FlowElementsCallCallables domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x32b2e182, 0x8cd9, 0x44b9, 0xac, 0x87, 0xb6, 0x96, 0x71, 0xbd, 0x7d, 0x54);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FlowElementsCallCallables link in the same Partition as the given FlowElement
		/// </summary>
		/// <param name="source">FlowElement to use as the source of the relationship.</param>
		/// <param name="target">Callable to use as the target of the relationship.</param>
		public FlowElementsCallCallables(FlowElement source, Callable target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FlowElementsCallCallables.FlowElementDomainRoleId, source), new DslModeling::RoleAssignment(FlowElementsCallCallables.CallableDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FlowElementsCallCallables(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FlowElementsCallCallables(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FlowElementsCallCallables(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FlowElementsCallCallables(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FlowElement domain role code
		
		/// <summary>
		/// FlowElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid FlowElementDomainRoleId = new global::System.Guid(0x68cc3f48, 0xd792, 0x413b, 0xb5, 0x50, 0x51, 0x05, 0x41, 0x8f, 0x6a, 0xe5);
		
		/// <summary>
		/// DomainRole FlowElement
		/// Description for Sawczyn.Sequencer.FlowElementsCallCallables.FlowElement
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.Sequencer.FlowElementsCallCallables/FlowElement.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.Sequencer.FlowElementsCallCallables/FlowElement.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CallTarget", PropertyDisplayNameKey="Sawczyn.Sequencer.FlowElementsCallCallables/FlowElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("68cc3f48-d792-413b-b550-5105418f6ae5")]
		public virtual FlowElement FlowElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FlowElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, FlowElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FlowElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CallSource of a Callable
		/// <summary>
		/// Gets a list of CallSource.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<FlowElement> GetCallSource(Callable element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(element, CallableDomainRoleId);
		}
		#endregion
		#region Callable domain role code
		
		/// <summary>
		/// Callable domain role Id.
		/// </summary>
		public static readonly global::System.Guid CallableDomainRoleId = new global::System.Guid(0xe3eeba99, 0xb2c1, 0x4df0, 0x8c, 0x07, 0xc9, 0x6d, 0xaf, 0x86, 0xca, 0x70);
		
		/// <summary>
		/// DomainRole Callable
		/// Description for Sawczyn.Sequencer.FlowElementsCallCallables.Callable
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.Sequencer.FlowElementsCallCallables/Callable.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.Sequencer.FlowElementsCallCallables/Callable.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CallSource", PropertyDisplayNameKey="Sawczyn.Sequencer.FlowElementsCallCallables/Callable.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e3eeba99-b2c1-4df0-8c07-c96daf86ca70")]
		public virtual Callable Callable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Callable)DslModeling::DomainRoleInfo.GetRolePlayer(this, CallableDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CallableDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CallTarget of a FlowElement
		/// <summary>
		/// Gets a list of CallTarget.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Callable> GetCallTarget(FlowElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Callable>, Callable>(element, FlowElementDomainRoleId);
		}
		#endregion
		#region IsAsync domain property code
		
		/// <summary>
		/// IsAsync domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsAsyncDomainPropertyId = new global::System.Guid(0xbba76663, 0x10bf, 0x49c6, 0xb5, 0x97, 0xbd, 0xa1, 0x57, 0xe0, 0x4e, 0x27);
		
		/// <summary>
		/// Storage for IsAsync
		/// </summary>
		private global::System.Boolean isAsyncPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsAsync domain property.
		/// If true, call is asynchronous
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.Sequencer.FlowElementsCallCallables/IsAsync.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.Sequencer.FlowElementsCallCallables/IsAsync.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("bba76663-10bf-49c6-b597-bda157e04e27")]
		public global::System.Boolean IsAsync
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isAsyncPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsAsyncPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FlowElementsCallCallables.IsAsync domain property.
		/// </summary>
		internal sealed partial class IsAsyncPropertyHandler : DslModeling::DomainPropertyValueHandler<FlowElementsCallCallables, global::System.Boolean>
		{
			private IsAsyncPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FlowElementsCallCallables.IsAsync domain property value handler.
			/// </summary>
			public static readonly IsAsyncPropertyHandler Instance = new IsAsyncPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FlowElementsCallCallables.IsAsync domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsAsyncDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FlowElementsCallCallables element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isAsyncPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FlowElementsCallCallables element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isAsyncPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region FlowElement link accessor
		/// <summary>
		/// Get the list of FlowElementsCallCallables links to a FlowElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.Sequencer.FlowElementsCallCallables> GetLinksToCallTarget ( global::Sawczyn.Sequencer.FlowElement flowElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.FlowElementsCallCallables>(flowElementInstance, global::Sawczyn.Sequencer.FlowElementsCallCallables.FlowElementDomainRoleId);
		}
		#endregion
		#region Callable link accessor
		/// <summary>
		/// Get the list of FlowElementsCallCallables links to a Callable.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.Sequencer.FlowElementsCallCallables> GetLinksToCallSource ( global::Sawczyn.Sequencer.Callable callableInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.FlowElementsCallCallables>(callableInstance, global::Sawczyn.Sequencer.FlowElementsCallCallables.CallableDomainRoleId);
		}
		#endregion
		#region FlowElementsCallCallables instance accessors
		
		/// <summary>
		/// Get any FlowElementsCallCallables links between a given FlowElement and a Callable.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.Sequencer.FlowElementsCallCallables> GetLinks( global::Sawczyn.Sequencer.FlowElement source, global::Sawczyn.Sequencer.Callable target )
		{
			global::System.Collections.Generic.List<global::Sawczyn.Sequencer.FlowElementsCallCallables> outLinks = new global::System.Collections.Generic.List<global::Sawczyn.Sequencer.FlowElementsCallCallables>();
			global::System.Collections.Generic.IList<global::Sawczyn.Sequencer.FlowElementsCallCallables> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.FlowElementsCallCallables>(source, global::Sawczyn.Sequencer.FlowElementsCallCallables.FlowElementDomainRoleId);
			foreach ( global::Sawczyn.Sequencer.FlowElementsCallCallables link in links )
			{
				if ( target.Equals(link.Callable) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FlowElementsCallCallables link between a given FlowElementand a Callable.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.Sequencer.FlowElementsCallCallables GetLink( global::Sawczyn.Sequencer.FlowElement source, global::Sawczyn.Sequencer.Callable target )
		{
			global::System.Collections.Generic.IList<global::Sawczyn.Sequencer.FlowElementsCallCallables> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.FlowElementsCallCallables>(source, global::Sawczyn.Sequencer.FlowElementsCallCallables.FlowElementDomainRoleId);
			foreach ( global::Sawczyn.Sequencer.FlowElementsCallCallables link in links )
			{
				if ( target.Equals(link.Callable) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Sawczyn.Sequencer
{
	/// <summary>
	/// DomainRelationship CallablesReturnResults
	/// Description for Sawczyn.Sequencer.CallablesReturnResults
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.Sequencer.CallablesReturnResults.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.Sequencer.CallablesReturnResults.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.Sequencer.SequencerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("b111f5f5-f6cb-4110-bdfe-dca4e793030b")]
	public partial class CallablesReturnResults : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CallablesReturnResults domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb111f5f5, 0xf6cb, 0x4110, 0xbd, 0xfe, 0xdc, 0xa4, 0xe7, 0x93, 0x03, 0x0b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CallablesReturnResults link in the same Partition as the given Callable
		/// </summary>
		/// <param name="source">Callable to use as the source of the relationship.</param>
		/// <param name="target">Callable to use as the target of the relationship.</param>
		public CallablesReturnResults(Callable source, Callable target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CallablesReturnResults.SourceCallableDomainRoleId, source), new DslModeling::RoleAssignment(CallablesReturnResults.TargetCallableDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CallablesReturnResults(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CallablesReturnResults(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CallablesReturnResults(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CallablesReturnResults(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceCallable domain role code
		
		/// <summary>
		/// SourceCallable domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceCallableDomainRoleId = new global::System.Guid(0x84f9bd4c, 0x18c1, 0x4737, 0x9e, 0x61, 0x7d, 0xff, 0x43, 0x3e, 0xf4, 0x49);
		
		/// <summary>
		/// DomainRole SourceCallable
		/// Description for Sawczyn.Sequencer.CallablesReturnResults.SourceCallable
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.Sequencer.CallablesReturnResults/SourceCallable.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.Sequencer.CallablesReturnResults/SourceCallable.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ResultTarget", PropertyDisplayNameKey="Sawczyn.Sequencer.CallablesReturnResults/SourceCallable.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("84f9bd4c-18c1-4737-9e61-7dff433ef449")]
		public virtual Callable SourceCallable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Callable)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceCallableDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceCallableDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ResultSource of a Callable
		/// <summary>
		/// Gets a list of ResultSource.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Callable> GetResultSource(Callable element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Callable>, Callable>(element, TargetCallableDomainRoleId);
		}
		#endregion
		#region TargetCallable domain role code
		
		/// <summary>
		/// TargetCallable domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetCallableDomainRoleId = new global::System.Guid(0xe9c72606, 0x8b87, 0x49de, 0x8d, 0x65, 0x0e, 0xc4, 0x78, 0x63, 0x6c, 0x44);
		
		/// <summary>
		/// DomainRole TargetCallable
		/// Description for Sawczyn.Sequencer.CallablesReturnResults.TargetCallable
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.Sequencer.CallablesReturnResults/TargetCallable.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.Sequencer.CallablesReturnResults/TargetCallable.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Sawczyn.Sequencer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ResultSource", PropertyDisplayNameKey="Sawczyn.Sequencer.CallablesReturnResults/TargetCallable.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e9c72606-8b87-49de-8d65-0ec478636c44")]
		public virtual Callable TargetCallable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Callable)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetCallableDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetCallableDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ResultTarget of a Callable
		/// <summary>
		/// Gets a list of ResultTarget.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Callable> GetResultTarget(Callable element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Callable>, Callable>(element, SourceCallableDomainRoleId);
		}
		#endregion
		#region SourceCallable link accessor
		/// <summary>
		/// Get the list of CallablesReturnResults links to a Callable.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.Sequencer.CallablesReturnResults> GetLinksToResultTarget ( global::Sawczyn.Sequencer.Callable sourceCallableInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.CallablesReturnResults>(sourceCallableInstance, global::Sawczyn.Sequencer.CallablesReturnResults.SourceCallableDomainRoleId);
		}
		#endregion
		#region TargetCallable link accessor
		/// <summary>
		/// Get the list of CallablesReturnResults links to a Callable.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.Sequencer.CallablesReturnResults> GetLinksToResultSource ( global::Sawczyn.Sequencer.Callable targetCallableInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.CallablesReturnResults>(targetCallableInstance, global::Sawczyn.Sequencer.CallablesReturnResults.TargetCallableDomainRoleId);
		}
		#endregion
		#region CallablesReturnResults instance accessors
		
		/// <summary>
		/// Get any CallablesReturnResults links between a given Callable and a Callable.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.Sequencer.CallablesReturnResults> GetLinks( global::Sawczyn.Sequencer.Callable source, global::Sawczyn.Sequencer.Callable target )
		{
			global::System.Collections.Generic.List<global::Sawczyn.Sequencer.CallablesReturnResults> outLinks = new global::System.Collections.Generic.List<global::Sawczyn.Sequencer.CallablesReturnResults>();
			global::System.Collections.Generic.IList<global::Sawczyn.Sequencer.CallablesReturnResults> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.CallablesReturnResults>(source, global::Sawczyn.Sequencer.CallablesReturnResults.SourceCallableDomainRoleId);
			foreach ( global::Sawczyn.Sequencer.CallablesReturnResults link in links )
			{
				if ( target.Equals(link.TargetCallable) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CallablesReturnResults link between a given Callableand a Callable.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Sawczyn.Sequencer.CallablesReturnResults GetLink( global::Sawczyn.Sequencer.Callable source, global::Sawczyn.Sequencer.Callable target )
		{
			global::System.Collections.Generic.IList<global::Sawczyn.Sequencer.CallablesReturnResults> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Sawczyn.Sequencer.CallablesReturnResults>(source, global::Sawczyn.Sequencer.CallablesReturnResults.SourceCallableDomainRoleId);
			foreach ( global::Sawczyn.Sequencer.CallablesReturnResults link in links )
			{
				if ( target.Equals(link.TargetCallable) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
