//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Sawczyn.Sequencer
{
	/// <summary>
	/// DomainClass NamedElement
	/// Overall base class that provides every element with a Name property which acts
	/// as its MonikerKey for serialization.
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.Sequencer.NamedElement.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.Sequencer.NamedElement.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.Sequencer.SequencerDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("30e6ce39-1e74-4c94-8cf1-a8af7b4af056")]
	public abstract partial class NamedElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NamedElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x30e6ce39, 0x1e74, 0x4c94, 0x8c, 0xf1, 0xa8, 0xaf, 0x7b, 0x4a, 0xf0, 0x56);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected NamedElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xb558d316, 0xce43, 0x412d, 0x86, 0x67, 0xd8, 0x45, 0xec, 0xb0, 0x41, 0x95);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Sawczyn.Sequencer.NamedElement.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.Sequencer.NamedElement/Name.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.Sequencer.NamedElement/Name.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("b558d316-ce43-412d-8667-d845ecb04195")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NamedElement.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElement, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NamedElement.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NamedElement.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NamedElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NamedElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x9865151d, 0xe41c, 0x4044, 0xb3, 0xc3, 0x45, 0xaa, 0x13, 0x73, 0x8d, 0x4e);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Summary comments
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.Sequencer.NamedElement/Description.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.Sequencer.NamedElement/Description.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("9865151d-e41c-4044-b3c3-45aa13738d4e")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NamedElement.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElement, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NamedElement.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NamedElement.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NamedElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NamedElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Sawczyn.Sequencer
{
	/// <summary>
	/// DomainClass SequenceDiagram
	/// Root element in which others are embedded.
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.Sequencer.SequenceDiagram.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.Sequencer.SequenceDiagram.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.Sequencer.SequencerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("bea83729-130e-4534-bc3c-b88eb7d255bd")]
	public partial class SequenceDiagram : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SequenceDiagram domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbea83729, 0x130e, 0x4534, 0xbc, 0x3c, 0xb8, 0x8e, 0xb7, 0xd2, 0x55, 0xbd);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SequenceDiagram(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SequenceDiagram(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Comments opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comments.
		/// Description for Sawczyn.Sequencer.SequenceDiagramHasComments.SequenceDiagram
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::Sawczyn.Sequencer.SequenceDiagramHasComments.SequenceDiagramDomainRoleId);
			}
		}
		#endregion
		#region Classed opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Classed.
		/// Description for Sawczyn.Sequencer.SequenceDiagramHasClasses.SequenceDiagram
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Class> Classed
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Class>, Class>(global::Sawczyn.Sequencer.SequenceDiagramHasClasses.SequenceDiagramDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Sawczyn.Sequencer.Class.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Sawczyn.Sequencer.Comment.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Sawczyn.Sequencer.Class sourceClass1 = sourceElement as global::Sawczyn.Sequencer.Class;
			if (sourceClass1 != null)
			{
				// Create link for path SequenceDiagramHasClasses.Classed
				this.Classed.Add(sourceClass1);

				return;
			}
				
			global::Sawczyn.Sequencer.Comment sourceComment2 = sourceElement as global::Sawczyn.Sequencer.Comment;
			if (sourceComment2 != null)
			{
				// Create link for path SequenceDiagramHasComments.Comments
				this.Comments.Add(sourceComment2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Sawczyn.Sequencer.Class sourceClass1 = sourceElement as global::Sawczyn.Sequencer.Class;
			if (sourceClass1 != null)
			{
				// Delete link for path SequenceDiagramHasClasses.Classed
				
				foreach (DslModeling::ElementLink link in global::Sawczyn.Sequencer.SequenceDiagramHasClasses.GetLinks((global::Sawczyn.Sequencer.SequenceDiagram)this, sourceClass1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Sawczyn.Sequencer.SequenceDiagramHasClasses.SequenceDiagramDomainRoleId, global::Sawczyn.Sequencer.SequenceDiagramHasClasses.ClassDomainRoleId);
				}

				return;
			}
				
			global::Sawczyn.Sequencer.Comment sourceComment2 = sourceElement as global::Sawczyn.Sequencer.Comment;
			if (sourceComment2 != null)
			{
				// Delete link for path SequenceDiagramHasComments.Comments
				
				foreach (DslModeling::ElementLink link in global::Sawczyn.Sequencer.SequenceDiagramHasComments.GetLinks((global::Sawczyn.Sequencer.SequenceDiagram)this, sourceComment2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Sawczyn.Sequencer.SequenceDiagramHasComments.SequenceDiagramDomainRoleId, global::Sawczyn.Sequencer.SequenceDiagramHasComments.CommentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Sawczyn.Sequencer
{
	/// <summary>
	/// DomainClass FlowElement
	/// Elements that can be connected by Flow links.
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.Sequencer.FlowElement.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.Sequencer.FlowElement.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.Sequencer.SequencerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f14909b9-fa97-4696-9ea0-92a45c6915f7")]
	public abstract partial class FlowElement : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FlowElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf14909b9, 0xfa97, 0x4696, 0x9e, 0xa0, 0x92, 0xa4, 0x5c, 0x69, 0x15, 0xf7);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected FlowElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FlowTo opposite domain role accessor
		
		/// <summary>
		/// Gets a list of FlowTo.
		/// Description for Sawczyn.Sequencer.Flow.FlowFrom
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FlowElement> FlowTo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(global::Sawczyn.Sequencer.Flow.FlowFromDomainRoleId);
			}
		}
		#endregion
		#region FlowFrom opposite domain role accessor
		
		/// <summary>
		/// Gets a list of FlowFrom.
		/// Description for Sawczyn.Sequencer.Flow.FlowTo
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FlowElement> FlowFrom
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(global::Sawczyn.Sequencer.Flow.FlowToDomainRoleId);
			}
		}
		#endregion
		#region Comments opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comments.
		/// Description for Sawczyn.Sequencer.CommentReferencesSubjects.Subject
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::Sawczyn.Sequencer.CommentReferencesSubjects.SubjectDomainRoleId);
			}
		}
		#endregion
		#region Class opposite domain role accessor
		/// <summary>
		/// Gets or sets Class.
		/// Description for Sawczyn.Sequencer.ClassHasFlowElements.FlowElement
		/// </summary>
		public virtual Class Class
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Sawczyn.Sequencer.ClassHasFlowElements.FlowElementDomainRoleId) as Class;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Sawczyn.Sequencer.ClassHasFlowElements.FlowElementDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Sawczyn.Sequencer.Comment.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Sawczyn.Sequencer.Comment sourceComment1 = sourceElement as global::Sawczyn.Sequencer.Comment;
			if (sourceComment1 != null)
			{
				// Create link for path ClassHasFlowElements.Class/!Class/SequenceDiagramHasClasses.SequenceDiagram/!SequenceDiagram/SequenceDiagramHasComments.Comments
						// Segments 0 and 1
						global::Sawczyn.Sequencer.Class this2 = this.Class;
						if ( this2 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ClassHasFlowElements.Class/!Class/SequenceDiagramHasClasses.SequenceDiagram/!SequenceDiagram/SequenceDiagramHasComments.Comments'.");
						// Segments 2 and 3
						global::Sawczyn.Sequencer.SequenceDiagram commentHost0 = this2.SequenceDiagram;
						if ( commentHost0 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ClassHasFlowElements.Class/!Class/SequenceDiagramHasClasses.SequenceDiagram/!SequenceDiagram/SequenceDiagramHasComments.Comments'.");
				commentHost0.Comments.Add(sourceComment1);

				// Create link for path CommentReferencesSubjects.Comments
				this.Comments.Add(sourceComment1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Sawczyn.Sequencer.Comment sourceComment1 = sourceElement as global::Sawczyn.Sequencer.Comment;
			if (sourceComment1 != null)
			{
				// Delete link for path ClassHasFlowElements.Class/!Class/SequenceDiagramHasClasses.SequenceDiagram/!SequenceDiagram/SequenceDiagramHasComments.Comments
					// Segments 0 and 1
					global::Sawczyn.Sequencer.Class this2 = this.Class;
					if ( this2 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ClassHasFlowElements.Class/!Class/SequenceDiagramHasClasses.SequenceDiagram/!SequenceDiagram/SequenceDiagramHasComments.Comments'.");
					// Segments 2 and 3
					global::Sawczyn.Sequencer.SequenceDiagram commentHost0 = this2.SequenceDiagram;
					if ( commentHost0 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ClassHasFlowElements.Class/!Class/SequenceDiagramHasClasses.SequenceDiagram/!SequenceDiagram/SequenceDiagramHasComments.Comments'.");
				
				foreach (DslModeling::ElementLink link in global::Sawczyn.Sequencer.SequenceDiagramHasComments.GetLinks((global::Sawczyn.Sequencer.SequenceDiagram)commentHost0, sourceComment1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Sawczyn.Sequencer.SequenceDiagramHasComments.SequenceDiagramDomainRoleId, global::Sawczyn.Sequencer.SequenceDiagramHasComments.CommentDomainRoleId);
				}

				// Delete link for path CommentReferencesSubjects.Comments
				
				foreach (DslModeling::ElementLink link in global::Sawczyn.Sequencer.CommentReferencesSubjects.GetLinks(sourceComment1, (global::Sawczyn.Sequencer.FlowElement)this))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Sawczyn.Sequencer.CommentReferencesSubjects.SubjectDomainRoleId, global::Sawczyn.Sequencer.CommentReferencesSubjects.CommentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Sawczyn.Sequencer
{
	/// <summary>
	/// DomainClass Method
	/// Method (function) called in a class
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.Sequencer.Method.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.Sequencer.Method.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.Sequencer.SequencerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("95b21624-2d8b-4c22-a120-62b10c08b936")]
	public partial class Method : FlowElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Method domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x95b21624, 0x2d8b, 0x4c22, 0xa1, 0x20, 0x62, 0xb1, 0x0c, 0x08, 0xb9, 0x36);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Method(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Method(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsStatic domain property code
		
		/// <summary>
		/// IsStatic domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsStaticDomainPropertyId = new global::System.Guid(0xebb2fdf9, 0xe7e3, 0x4a38, 0x9c, 0xb1, 0xfe, 0xff, 0x17, 0xa1, 0xb5, 0x78);
		
		/// <summary>
		/// Storage for IsStatic
		/// </summary>
		private global::System.Boolean isStaticPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsStatic domain property.
		/// If true, this is a static method
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.Sequencer.Method/IsStatic.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.Sequencer.Method/IsStatic.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ebb2fdf9-e7e3-4a38-9cb1-feff17a1b578")]
		public global::System.Boolean IsStatic
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isStaticPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsStaticPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Method.IsStatic domain property.
		/// </summary>
		internal sealed partial class IsStaticPropertyHandler : DslModeling::DomainPropertyValueHandler<Method, global::System.Boolean>
		{
			private IsStaticPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Method.IsStatic domain property value handler.
			/// </summary>
			public static readonly IsStaticPropertyHandler Instance = new IsStaticPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Method.IsStatic domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsStaticDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Method element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isStaticPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Method element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isStaticPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Sawczyn.Sequencer
{
	/// <summary>
	/// DomainClass StartPoint
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.Sequencer.StartPoint.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.Sequencer.StartPoint.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.Sequencer.SequencerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f272d0ca-5925-46d7-816e-cbcc7bd6e14d")]
	public partial class StartPoint : FlowElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// StartPoint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf272d0ca, 0x5925, 0x46d7, 0x81, 0x6e, 0xcb, 0xcc, 0x7b, 0xd6, 0xe1, 0x4d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StartPoint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StartPoint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Sawczyn.Sequencer
{
	/// <summary>
	/// DomainClass EndPoint
	/// End of the documented sequence
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.Sequencer.EndPoint.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.Sequencer.EndPoint.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.Sequencer.SequencerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("dc3df258-1ddd-4aad-8ecd-747ffbab2f8d")]
	public partial class EndPoint : FlowElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EndPoint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdc3df258, 0x1ddd, 0x4aad, 0x8e, 0xcd, 0x74, 0x7f, 0xfb, 0xab, 0x2f, 0x8d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EndPoint(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EndPoint(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Sawczyn.Sequencer
{
	/// <summary>
	/// DomainClass Branch
	/// Condition branch
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.Sequencer.Branch.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.Sequencer.Branch.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.Sequencer.SequencerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4abaa0ce-6d9f-4498-9ce6-b797c7be3c7b")]
	public partial class Branch : FlowElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Branch domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4abaa0ce, 0x6d9f, 0x4498, 0x9c, 0xe6, 0xb7, 0x97, 0xc7, 0xbe, 0x3c, 0x7b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Branch(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Branch(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Condition domain property code
		
		/// <summary>
		/// Condition domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConditionDomainPropertyId = new global::System.Guid(0xce581e9b, 0x9748, 0x4d1d, 0xa1, 0xf6, 0x95, 0xb9, 0xe4, 0x91, 0x07, 0xde);
		
		/// <summary>
		/// Storage for Condition
		/// </summary>
		private global::System.String conditionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Condition domain property.
		/// Description for Sawczyn.Sequencer.Branch.Condition
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.Sequencer.Branch/Condition.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.Sequencer.Branch/Condition.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ce581e9b-9748-4d1d-a1f6-95b9e49107de")]
		public global::System.String Condition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return conditionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ConditionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Branch.Condition domain property.
		/// </summary>
		internal sealed partial class ConditionPropertyHandler : DslModeling::DomainPropertyValueHandler<Branch, global::System.String>
		{
			private ConditionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Branch.Condition domain property value handler.
			/// </summary>
			public static readonly ConditionPropertyHandler Instance = new ConditionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Branch.Condition domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ConditionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Branch element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.conditionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Branch element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.conditionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Sawczyn.Sequencer
{
	/// <summary>
	/// DomainClass Synchronization
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.Sequencer.Synchronization.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.Sequencer.Synchronization.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.Sequencer.SequencerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("472aff60-370f-4cc4-8871-63fa556ad4f4")]
	public partial class Synchronization : FlowElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Synchronization domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x472aff60, 0x370f, 0x4cc4, 0x88, 0x71, 0x63, 0xfa, 0x55, 0x6a, 0xd4, 0xf4);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Synchronization(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Synchronization(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Sawczyn.Sequencer
{
	/// <summary>
	/// DomainClass Comment
	/// Can be attached to any task flow element.
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.Sequencer.Comment.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.Sequencer.Comment.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.Sequencer.SequencerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2edf8064-010c-4ba1-84a1-a0be29c6096b")]
	public partial class Comment : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Comment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2edf8064, 0x010c, 0x4ba1, 0x84, 0xa1, 0xa0, 0xbe, 0x29, 0xc6, 0x09, 0x6b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0x3ab9bbf1, 0x0881, 0x4606, 0xaa, 0x1e, 0xd7, 0x8b, 0x13, 0x15, 0x00, 0x77);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.Sequencer.Comment/Text.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.Sequencer.Comment/Text.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("3ab9bbf1-0881-4606-aa1e-d78b13150077")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Comment.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<Comment, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Comment.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Comment.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Comment element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Comment element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SequenceDiagram opposite domain role accessor
		/// <summary>
		/// Gets or sets SequenceDiagram.
		/// Description for Sawczyn.Sequencer.SequenceDiagramHasComments.Comment
		/// </summary>
		public virtual SequenceDiagram SequenceDiagram
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Sawczyn.Sequencer.SequenceDiagramHasComments.CommentDomainRoleId) as SequenceDiagram;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Sawczyn.Sequencer.SequenceDiagramHasComments.CommentDomainRoleId, value);
			}
		}
		#endregion
		#region Subjects opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Subjects.
		/// Description for Sawczyn.Sequencer.CommentReferencesSubjects.Comment
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FlowElement> Subjects
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(global::Sawczyn.Sequencer.CommentReferencesSubjects.CommentDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Sawczyn.Sequencer
{
	/// <summary>
	/// DomainClass Class
	/// Represented by a swim lane on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.Sequencer.Class.DisplayName", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.Sequencer.Class.Description", typeof(global::Sawczyn.Sequencer.SequencerDomainModel), "Company.Sequencer.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.Sequencer.SequencerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("193dad63-b4e8-4fed-a174-5775eeeb7a7f")]
	public partial class Class : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Class domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x193dad63, 0xb4e8, 0x4fed, 0xa1, 0x74, 0x57, 0x75, 0xee, 0xeb, 0x7a, 0x7f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Class(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Class(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SequenceDiagram opposite domain role accessor
		/// <summary>
		/// Gets or sets SequenceDiagram.
		/// Description for Sawczyn.Sequencer.SequenceDiagramHasClasses.Class
		/// </summary>
		public virtual SequenceDiagram SequenceDiagram
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Sawczyn.Sequencer.SequenceDiagramHasClasses.ClassDomainRoleId) as SequenceDiagram;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Sawczyn.Sequencer.SequenceDiagramHasClasses.ClassDomainRoleId, value);
			}
		}
		#endregion
		#region FlowElements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of FlowElements.
		/// Description for Sawczyn.Sequencer.ClassHasFlowElements.Class
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<FlowElement> FlowElements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<FlowElement>, FlowElement>(global::Sawczyn.Sequencer.ClassHasFlowElements.ClassDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Sawczyn.Sequencer.Class.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Sawczyn.Sequencer.FlowElement.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Sawczyn.Sequencer.Comment.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Sawczyn.Sequencer.Class sourceClass1 = sourceElement as global::Sawczyn.Sequencer.Class;
			if (sourceClass1 != null)
			{
				// Create link for path SequenceDiagramHasClasses.SequenceDiagram/!SequenceDiagram/.Classed
						// Segments 0 and 1
						global::Sawczyn.Sequencer.SequenceDiagram classHost = this.SequenceDiagram;
						if ( classHost == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'SequenceDiagramHasClasses.SequenceDiagram/!SequenceDiagram/.Classed'.");
				classHost.Classed.Add(sourceClass1);

				return;
			}
				
			global::Sawczyn.Sequencer.FlowElement sourceFlowElement2 = sourceElement as global::Sawczyn.Sequencer.FlowElement;
			if (sourceFlowElement2 != null)
			{
				// Create link for path ClassHasFlowElements.FlowElements
				this.FlowElements.Add(sourceFlowElement2);

				return;
			}
				
			global::Sawczyn.Sequencer.Comment sourceComment3 = sourceElement as global::Sawczyn.Sequencer.Comment;
			if (sourceComment3 != null)
			{
				// Create link for path SequenceDiagramHasClasses.SequenceDiagram/!SequenceDiagram/SequenceDiagramHasComments.Comments
						// Segments 0 and 1
						global::Sawczyn.Sequencer.SequenceDiagram commentHost = this.SequenceDiagram;
						if ( commentHost == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'SequenceDiagramHasClasses.SequenceDiagram/!SequenceDiagram/SequenceDiagramHasComments.Comments'.");
				commentHost.Comments.Add(sourceComment3);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Sawczyn.Sequencer.Class sourceClass1 = sourceElement as global::Sawczyn.Sequencer.Class;
			if (sourceClass1 != null)
			{
				// Delete link for path SequenceDiagramHasClasses.SequenceDiagram/!SequenceDiagram/.Classed
					// Segments 0 and 1
					global::Sawczyn.Sequencer.SequenceDiagram classHost = this.SequenceDiagram;
					if ( classHost == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'SequenceDiagramHasClasses.SequenceDiagram/!SequenceDiagram/.Classed'.");
				
				foreach (DslModeling::ElementLink link in global::Sawczyn.Sequencer.SequenceDiagramHasClasses.GetLinks((global::Sawczyn.Sequencer.SequenceDiagram)classHost, sourceClass1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Sawczyn.Sequencer.SequenceDiagramHasClasses.SequenceDiagramDomainRoleId, global::Sawczyn.Sequencer.SequenceDiagramHasClasses.ClassDomainRoleId);
				}

				return;
			}
				
			global::Sawczyn.Sequencer.FlowElement sourceFlowElement2 = sourceElement as global::Sawczyn.Sequencer.FlowElement;
			if (sourceFlowElement2 != null)
			{
				// Delete link for path ClassHasFlowElements.FlowElements
				
				foreach (DslModeling::ElementLink link in global::Sawczyn.Sequencer.ClassHasFlowElements.GetLinks((global::Sawczyn.Sequencer.Class)this, sourceFlowElement2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Sawczyn.Sequencer.ClassHasFlowElements.ClassDomainRoleId, global::Sawczyn.Sequencer.ClassHasFlowElements.FlowElementDomainRoleId);
				}

				return;
			}
				
			global::Sawczyn.Sequencer.Comment sourceComment3 = sourceElement as global::Sawczyn.Sequencer.Comment;
			if (sourceComment3 != null)
			{
				// Delete link for path SequenceDiagramHasClasses.SequenceDiagram/!SequenceDiagram/SequenceDiagramHasComments.Comments
					// Segments 0 and 1
					global::Sawczyn.Sequencer.SequenceDiagram commentHost = this.SequenceDiagram;
					if ( commentHost == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'SequenceDiagramHasClasses.SequenceDiagram/!SequenceDiagram/SequenceDiagramHasComments.Comments'.");
				
				foreach (DslModeling::ElementLink link in global::Sawczyn.Sequencer.SequenceDiagramHasComments.GetLinks((global::Sawczyn.Sequencer.SequenceDiagram)commentHost, sourceComment3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Sawczyn.Sequencer.SequenceDiagramHasComments.SequenceDiagramDomainRoleId, global::Sawczyn.Sequencer.SequenceDiagramHasComments.CommentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
